import Head from 'next/head'
import Script from 'next/script'
import { useState, useEffect, useContext} from 'react'
import React from 'react'
import fetchWeather from './api/fetchWeather'

import fetchNews from './api/fetchNews'
import styles from "./index.module.scss"
import iconn from '../assets/icons/business-icon.svg'
import Image from 'next/image'
import BaseLayout from '../layouts/baselayout'
import { AppContext } from '../layouts/baselayout'
import AOS from 'aos';
import 'aos/dist/aos.css';
import { useRef } from 'react'
import { ErrorBoundary } from 'react-error-boundary'
import { Suspense } from 'react'

import loadingIco from '../assets/img/loadingIco.png'

import Twitter from '../components/Twitter' 
import NewsCard from '../components/NewsCard'

function Home() {

  const  appContext = useContext(AppContext);

  let query = appContext.state.newsApiQuery
  // const [query, setQuery]= useState(appContext.state.newsApiQuery);
  const [twitter, setTwitter]= useState(appContext.state.newsApiQuery.twitter );
  const [weather, setWeather] = useState({})
  const [loading, setLoading] = useState(false)
  const [news, setNews] = useState({status: 'd', query: query, response: {
          docs: []
        }})
  const [date, setDate] = useState(Date)
  const [icon, setIcon] = React.useState("")


 

  
  



  
  const getWeather = async (e) =>{
    
    const data = await fetchWeather('lagos');
    data.weather ? setWeather({...data},)  
    : setWeather({
        ...weather,
        error: "Can't fetch weather infomation check network connection and city name"
      })
      
      
    
  }


  const getNews = async () =>{
    console.log('query', query)
   
    setLoading(true)
    const data = await fetchNews(query.query);
    console.log(query)
    
    data.status === 'OK' ? setNews({
        ...data,
      })  : setNews({
        ...news,
        status: '',
        error: "Can't fetch News check network connection",
        
      })

      setLoading(false)
          console.log('news:', data)



    
        
      
      
    
  }

 
  
 
  useEffect(()=>{
    AOS.init();
    getNews()
    console.log('rendering')
    setTwitter(appContext.state.newsApiQuery.twitter)

  },[ appContext.state.newsApiQuery.query])
  
  
  return (
    <>
      <Head>
        <title>Weather</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.index} onClick={()=> appContext.setShowMenu(false)}>

        <div className={styles.news_container}>
          {
            loading ? <div className={styles.loading}><Image src={loadingIco} alt= ''/></div> : null 
            
          }
          {
            news.error && !loading ? <p>{news.error}</p> : null 
            
          }
          {
            news.response ? 
              
                
              news.response.docs.map((article, index)=> {
                return (
                
                  <NewsCard
                    key={index}
                    headline={article.headline.main}
                    abstract={article.abstract}
                    multimedia={article.multimedia}
                    leadParagraph={article.lead_paragraph}
                    url = {article.web_url}
                  />
                  
                )
              })
              
            : null
            // <div className={styles.news_container}>
            //   {
            //     news.error ? : <div className={styles.loading}><Image src={loadingIco} alt= ''/></div>
            //   }
              
            // </div>
          }
  -     </div>

        <div className={styles.container_2}>
          <Twitter url={"https://twitter.com/" + twitter + "?ref_src=twsrc%5Etfw"}/>

        
        </div>
      
      </div>

    </>

    
  )}

const Container = ()=>{
  return(
    <BaseLayout page={<Home/>}></BaseLayout>
  )
}

export default Container

